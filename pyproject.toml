[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mcp-clickhouse-server"
version = "0.1.0"
description = "Enterprise-grade MCP server for ClickHouse integration"
authors = ["gemiit"]
readme = "README.md"
license = "Apache-2.0"
repository = "https://github.com/gemiit/mcp-clickhouse"
documentation = "https://gemiit.github.io/mcp-clickhouse"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Database",
    "Topic :: System :: Systems Administration",
]
packages = [
    { include = "app" }
]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
# Core dependencies
mcp = "^1.10.1"  # Model Context Protocol SDK
clickhouse-driver = "^0.2.5"  # ClickHouse client
pydantic = "^2.1.1"  # Data validation
pydantic-settings = "^2.0.3"  # Settings management for Pydantic v2
fastapi = "^0.100.0"  # API framework
uvicorn = "^0.23.2"  # ASGI server
httpx = "^0.27.0"  # HTTP client (>=0.27 required by mcp)
python-dotenv = "^1.0.0"  # Environment variable management
structlog = "^23.1.0"  # Structured logging
typer = "^0.9.0"  # CLI interface
pyyaml = "^6.0"  # YAML parsing
prometheus-client = "^0.17.1"  # Metrics
opentelemetry-api = "^1.19.0"  # Tracing
opentelemetry-sdk = "^1.19.0"
opentelemetry-exporter-otlp = "^1.19.0"
tenacity = "^8.2.3"  # Retry logic
mkdocstrings = { version = "^0.21.2", extras = ["python"] }  # Documentation generator

# Optional dependencies
opentelemetry-instrumentation-fastapi = "^0.55b1"
ruff = "^0.12.2"
clickhouse-cityhash = "^1.0.2.4"
lz4 = "^4.4.4"
[tool.poetry.extras]
prod = [
    "gunicorn",
    "uvloop",
    "httptools",
]
dev = [
    "black",
    "isort",
    "mypy",
    "flake8",
    "flake8-docstrings",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest-mock",
]
test = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-asyncio",
    "pytest-timeout",
    "pytest-env",
    "fakeredis",
    "responses",
]
docs = [
    "mkdocs",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocs-gen-files",
    "mkdocs-literate-nav",
    "mkdocs-section-index",
]

[tool.poetry.scripts]
mcp-clickhouse = "app.cli:app"

[tool.poetry.group.test.dependencies]
pytest = "^8.4.1"

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov=app --cov-report=term-missing --cov-report=xml -v"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["app"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
